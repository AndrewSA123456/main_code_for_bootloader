
main_code_for_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002808  080081d8  080081d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800a9e0  0800a9e0  000039e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa08  0800aa08  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa08  0800aa08  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa08  0800aa08  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa08  0800aa08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa0c  0800aa0c  00003a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800aa10  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800aa1c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800aa1c  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008af1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194c  00000000  00000000  0000cb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0000e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067a  00000000  00000000  0000ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240d2  00000000  00000000  0000f3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f1c  00000000  00000000  00033494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4792  00000000  00000000  0003c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002244  00000000  00000000  00120b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00122dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d8 <__do_global_dtors_aux>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	4c05      	ldr	r4, [pc, #20]	@ (80081f0 <__do_global_dtors_aux+0x18>)
 80081dc:	7823      	ldrb	r3, [r4, #0]
 80081de:	b933      	cbnz	r3, 80081ee <__do_global_dtors_aux+0x16>
 80081e0:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <__do_global_dtors_aux+0x1c>)
 80081e2:	b113      	cbz	r3, 80081ea <__do_global_dtors_aux+0x12>
 80081e4:	4804      	ldr	r0, [pc, #16]	@ (80081f8 <__do_global_dtors_aux+0x20>)
 80081e6:	f3af 8000 	nop.w
 80081ea:	2301      	movs	r3, #1
 80081ec:	7023      	strb	r3, [r4, #0]
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	2000000c 	.word	0x2000000c
 80081f4:	00000000 	.word	0x00000000
 80081f8:	0800a9c8 	.word	0x0800a9c8

080081fc <frame_dummy>:
 80081fc:	b508      	push	{r3, lr}
 80081fe:	4b03      	ldr	r3, [pc, #12]	@ (800820c <frame_dummy+0x10>)
 8008200:	b11b      	cbz	r3, 800820a <frame_dummy+0xe>
 8008202:	4903      	ldr	r1, [pc, #12]	@ (8008210 <frame_dummy+0x14>)
 8008204:	4803      	ldr	r0, [pc, #12]	@ (8008214 <frame_dummy+0x18>)
 8008206:	f3af 8000 	nop.w
 800820a:	bd08      	pop	{r3, pc}
 800820c:	00000000 	.word	0x00000000
 8008210:	20000010 	.word	0x20000010
 8008214:	0800a9c8 	.word	0x0800a9c8

08008218 <MX_FDCAN1_Init>:
#include "fdcan.h"

FDCAN_HandleTypeDef hfdcan1;

void MX_FDCAN1_Init(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  hfdcan1.Instance = FDCAN1;
 800821c:	4b1f      	ldr	r3, [pc, #124]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800821e:	4a20      	ldr	r2, [pc, #128]	@ (80082a0 <MX_FDCAN1_Init+0x88>)
 8008220:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8008222:	4b1e      	ldr	r3, [pc, #120]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008224:	2201      	movs	r2, #1
 8008226:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8008228:	4b1c      	ldr	r3, [pc, #112]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800822e:	4b1b      	ldr	r3, [pc, #108]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008230:	2200      	movs	r2, #0
 8008232:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8008234:	4b19      	ldr	r3, [pc, #100]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008236:	2200      	movs	r2, #0
 8008238:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800823a:	4b18      	ldr	r3, [pc, #96]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800823c:	2200      	movs	r2, #0
 800823e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8008240:	4b16      	ldr	r3, [pc, #88]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008242:	2200      	movs	r2, #0
 8008244:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8008246:	4b15      	ldr	r3, [pc, #84]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008248:	2205      	movs	r2, #5
 800824a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800824c:	4b13      	ldr	r3, [pc, #76]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800824e:	2201      	movs	r2, #1
 8008250:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8008252:	4b12      	ldr	r3, [pc, #72]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008254:	220e      	movs	r2, #14
 8008256:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8008258:	4b10      	ldr	r3, [pc, #64]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800825a:	2202      	movs	r2, #2
 800825c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800825e:	4b0f      	ldr	r3, [pc, #60]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008260:	2201      	movs	r2, #1
 8008262:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8008264:	4b0d      	ldr	r3, [pc, #52]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008266:	2201      	movs	r2, #1
 8008268:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800826a:	4b0c      	ldr	r3, [pc, #48]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800826c:	2201      	movs	r2, #1
 800826e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8008270:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008272:	2201      	movs	r2, #1
 8008274:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8008276:	4b09      	ldr	r3, [pc, #36]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008278:	2200      	movs	r2, #0
 800827a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800827c:	4b07      	ldr	r3, [pc, #28]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800827e:	2200      	movs	r2, #0
 8008280:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8008282:	4b06      	ldr	r3, [pc, #24]	@ (800829c <MX_FDCAN1_Init+0x84>)
 8008284:	2200      	movs	r2, #0
 8008286:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8008288:	4804      	ldr	r0, [pc, #16]	@ (800829c <MX_FDCAN1_Init+0x84>)
 800828a:	f000 fbfd 	bl	8008a88 <HAL_FDCAN_Init>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8008294:	f000 f9b5 	bl	8008602 <Error_Handler>
  }
}
 8008298:	bf00      	nop
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20000028 	.word	0x20000028
 80082a0:	40006400 	.word	0x40006400

080082a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b09e      	sub	sp, #120	@ 0x78
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	605a      	str	r2, [r3, #4]
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082bc:	f107 0310 	add.w	r3, r7, #16
 80082c0:	2254      	movs	r2, #84	@ 0x54
 80082c2:	2100      	movs	r1, #0
 80082c4:	4618      	mov	r0, r3
 80082c6:	f002 fb53 	bl	800a970 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a24      	ldr	r2, [pc, #144]	@ (8008360 <HAL_FDCAN_MspInit+0xbc>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d141      	bne.n	8008358 <HAL_FDCAN_MspInit+0xb4>
  {
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80082d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80082d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80082da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	4618      	mov	r0, r3
 80082e6:	f002 f8f5 	bl	800a4d4 <HAL_RCCEx_PeriphCLKConfig>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80082f0:	f000 f987 	bl	8008602 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80082f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008364 <HAL_FDCAN_MspInit+0xc0>)
 80082f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008364 <HAL_FDCAN_MspInit+0xc0>)
 80082fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80082fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008300:	4b18      	ldr	r3, [pc, #96]	@ (8008364 <HAL_FDCAN_MspInit+0xc0>)
 8008302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800830c:	4b15      	ldr	r3, [pc, #84]	@ (8008364 <HAL_FDCAN_MspInit+0xc0>)
 800830e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008310:	4a14      	ldr	r2, [pc, #80]	@ (8008364 <HAL_FDCAN_MspInit+0xc0>)
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008318:	4b12      	ldr	r3, [pc, #72]	@ (8008364 <HAL_FDCAN_MspInit+0xc0>)
 800831a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	60bb      	str	r3, [r7, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008324:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008328:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800832a:	2302      	movs	r3, #2
 800832c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832e:	2300      	movs	r3, #0
 8008330:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008332:	2300      	movs	r3, #0
 8008334:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8008336:	2309      	movs	r3, #9
 8008338:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800833a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800833e:	4619      	mov	r1, r3
 8008340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008344:	f001 f968 	bl	8009618 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	2015      	movs	r0, #21
 800834e:	f000 fb66 	bl	8008a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8008352:	2015      	movs	r0, #21
 8008354:	f000 fb7d 	bl	8008a52 <HAL_NVIC_EnableIRQ>
  }
}
 8008358:	bf00      	nop
 800835a:	3778      	adds	r7, #120	@ 0x78
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40006400 	.word	0x40006400
 8008364:	40021000 	.word	0x40021000

08008368 <FDCAN1_FilterSet>:
    HAL_NVIC_DisableIRQ(FDCAN1_IT0_IRQn);
  }
}

void FDCAN1_FilterSet(uint32_t filterCAN_ID1,uint32_t filterCAN_ID2)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8008372:	2300      	movs	r3, #0
 8008374:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800837a:	2302      	movs	r3, #2
 800837c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800837e:	2301      	movs	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = filterCAN_ID1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = filterCAN_ID2;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	61fb      	str	r3, [r7, #28]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800838a:	f107 0308 	add.w	r3, r7, #8
 800838e:	4619      	mov	r1, r3
 8008390:	4803      	ldr	r0, [pc, #12]	@ (80083a0 <FDCAN1_FilterSet+0x38>)
 8008392:	f000 fcd3 	bl	8008d3c <HAL_FDCAN_ConfigFilter>
}
 8008396:	bf00      	nop
 8008398:	3720      	adds	r7, #32
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000028 	.word	0x20000028

080083a4 <FDCAN1_ReceiveMessage>:

void FDCAN1_ReceiveMessage(uint8_t *RxData, uint32_t *len)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08c      	sub	sp, #48	@ 0x30
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0)
 80083ae:	2140      	movs	r1, #64	@ 0x40
 80083b0:	480c      	ldr	r0, [pc, #48]	@ (80083e4 <FDCAN1_ReceiveMessage+0x40>)
 80083b2:	f000 fe91 	bl	80090d8 <HAL_FDCAN_GetRxFifoFillLevel>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00e      	beq.n	80083da <FDCAN1_ReceiveMessage+0x36>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80083bc:	f107 0208 	add.w	r2, r7, #8
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2140      	movs	r1, #64	@ 0x40
 80083c4:	4807      	ldr	r0, [pc, #28]	@ (80083e4 <FDCAN1_ReceiveMessage+0x40>)
 80083c6:	f000 fd7f 	bl	8008ec8 <HAL_FDCAN_GetRxMessage>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <FDCAN1_ReceiveMessage+0x30>
		{
			Error_Handler();
 80083d0:	f000 f917 	bl	8008602 <Error_Handler>
		}
		*len = RxHeader.DataLength;
 80083d4:	697a      	ldr	r2, [r7, #20]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	601a      	str	r2, [r3, #0]
	}
}
 80083da:	bf00      	nop
 80083dc:	3730      	adds	r7, #48	@ 0x30
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000028 	.word	0x20000028

080083e8 <FDCAN1_TransmitMessage>:
 
void FDCAN1_TransmitMessage(uint32_t CAN_ID, uint8_t *data, uint32_t len)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	@ 0x38
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
	FDCAN_TxHeaderTypeDef TxHeader;
	TxHeader.Identifier = CAN_ID;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = len;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8008404:	2300      	movs	r3, #0
 8008406:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8008408:	2300      	movs	r3, #0
 800840a:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800840c:	2300      	movs	r3, #0
 800840e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8008410:	2300      	movs	r3, #0
 8008412:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.MessageMarker = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	637b      	str	r3, [r7, #52]	@ 0x34

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, data) != HAL_OK)
 8008418:	f107 0314 	add.w	r3, r7, #20
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4619      	mov	r1, r3
 8008420:	4805      	ldr	r0, [pc, #20]	@ (8008438 <FDCAN1_TransmitMessage+0x50>)
 8008422:	f000 fd0d 	bl	8008e40 <HAL_FDCAN_AddMessageToTxFifoQ>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <FDCAN1_TransmitMessage+0x48>
	{
		Error_Handler();
 800842c:	f000 f8e9 	bl	8008602 <Error_Handler>
	}
}
 8008430:	bf00      	nop
 8008432:	3738      	adds	r7, #56	@ 0x38
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000028 	.word	0x20000028

0800843c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008442:	f107 030c 	add.w	r3, r7, #12
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	605a      	str	r2, [r3, #4]
 800844c:	609a      	str	r2, [r3, #8]
 800844e:	60da      	str	r2, [r3, #12]
 8008450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008452:	4b1e      	ldr	r3, [pc, #120]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008456:	4a1d      	ldr	r2, [pc, #116]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008458:	f043 0320 	orr.w	r3, r3, #32
 800845c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800845e:	4b1b      	ldr	r3, [pc, #108]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	60bb      	str	r3, [r7, #8]
 8008468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800846a:	4b18      	ldr	r3, [pc, #96]	@ (80084cc <MX_GPIO_Init+0x90>)
 800846c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800846e:	4a17      	ldr	r2, [pc, #92]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008470:	f043 0301 	orr.w	r3, r3, #1
 8008474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008476:	4b15      	ldr	r3, [pc, #84]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	607b      	str	r3, [r7, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008482:	4b12      	ldr	r3, [pc, #72]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008486:	4a11      	ldr	r2, [pc, #68]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008488:	f043 0302 	orr.w	r3, r3, #2
 800848c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800848e:	4b0f      	ldr	r3, [pc, #60]	@ (80084cc <MX_GPIO_Init+0x90>)
 8008490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 800849a:	2200      	movs	r2, #0
 800849c:	2120      	movs	r1, #32
 800849e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80084a2:	f001 fa3b 	bl	800991c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_led_Pin */
  GPIO_InitStruct.Pin = user_led_Pin;
 80084a6:	2320      	movs	r3, #32
 80084a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084aa:	2301      	movs	r3, #1
 80084ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	4619      	mov	r1, r3
 80084bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80084c0:	f001 f8aa 	bl	8009618 <HAL_GPIO_Init>

}
 80084c4:	bf00      	nop
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40021000 	.word	0x40021000

080084d0 <main>:

#define NODE_ID 2
#define SDO_TX (0x600 + NODE_ID)
#define SDO_RX (0x580 + NODE_ID)
int main(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
	// ВНИМАНИЕ КОСТЫЛЬ!!!!
	// ST, вероятно в файле system_stm32g4xx.c, портит значение регистра SCB->VTOR.
	// Из-за этого отваливается таблица прерываний
	// g_pfnVectors указатель на начало таблицы прерываний из файла startup_stm32g474retx.s
	extern void *g_pfnVectors;
	SCB->VTOR = (uint32_t)&g_pfnVectors;
 80084d6:	4b22      	ldr	r3, [pc, #136]	@ (8008560 <main+0x90>)
 80084d8:	4a22      	ldr	r2, [pc, #136]	@ (8008564 <main+0x94>)
 80084da:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80084dc:	b662      	cpsie	i
}
 80084de:	bf00      	nop
	__enable_irq();
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80084e0:	f000 f92f 	bl	8008742 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 80084e4:	f000 f844 	bl	8008570 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80084e8:	f7ff ffa8 	bl	800843c <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80084ec:	f7ff fe94 	bl	8008218 <MX_FDCAN1_Init>
	FDCAN1_FilterSet(SDO_TX, 0);
 80084f0:	2100      	movs	r1, #0
 80084f2:	f240 6002 	movw	r0, #1538	@ 0x602
 80084f6:	f7ff ff37 	bl	8008368 <FDCAN1_FilterSet>
	HAL_FDCAN_Start(&hfdcan1);
 80084fa:	481b      	ldr	r0, [pc, #108]	@ (8008568 <main+0x98>)
 80084fc:	f000 fc78 	bl	8008df0 <HAL_FDCAN_Start>

	HAL_Delay(1000);
 8008500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008504:	f000 f98e 	bl	8008824 <HAL_Delay>
	uint8_t TxData[8] = {0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0};
 8008508:	4a18      	ldr	r2, [pc, #96]	@ (800856c <main+0x9c>)
 800850a:	f107 0310 	add.w	r3, r7, #16
 800850e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008512:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RxData[8] = {0};
 8008516:	2300      	movs	r3, #0
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
	uint32_t RxDataLen = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	607b      	str	r3, [r7, #4]
	FDCAN1_TransmitMessage(SDO_RX, TxData, 8);
 8008522:	f107 0310 	add.w	r3, r7, #16
 8008526:	2208      	movs	r2, #8
 8008528:	4619      	mov	r1, r3
 800852a:	f240 5082 	movw	r0, #1410	@ 0x582
 800852e:	f7ff ff5b 	bl	80083e8 <FDCAN1_TransmitMessage>
	while (1)
	{
		FDCAN1_ReceiveMessage(RxData, &RxDataLen);
 8008532:	1d3a      	adds	r2, r7, #4
 8008534:	f107 0308 	add.w	r3, r7, #8
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f7ff ff32 	bl	80083a4 <FDCAN1_ReceiveMessage>
		if(RxDataLen)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <main+0x7a>
		{
			Error_Handler();
 8008546:	f000 f85c 	bl	8008602 <Error_Handler>
		}
		HAL_GPIO_TogglePin(user_led_GPIO_Port, user_led_Pin);
 800854a:	2120      	movs	r1, #32
 800854c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008550:	f001 f9fc 	bl	800994c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8008554:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008558:	f000 f964 	bl	8008824 <HAL_Delay>
		FDCAN1_ReceiveMessage(RxData, &RxDataLen);
 800855c:	e7e9      	b.n	8008532 <main+0x62>
 800855e:	bf00      	nop
 8008560:	e000ed00 	.word	0xe000ed00
 8008564:	08008000 	.word	0x08008000
 8008568:	20000028 	.word	0x20000028
 800856c:	0800a9e0 	.word	0x0800a9e0

08008570 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b094      	sub	sp, #80	@ 0x50
 8008574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008576:	f107 0318 	add.w	r3, r7, #24
 800857a:	2238      	movs	r2, #56	@ 0x38
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f002 f9f6 	bl	800a970 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008584:	1d3b      	adds	r3, r7, #4
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	605a      	str	r2, [r3, #4]
 800858c:	609a      	str	r2, [r3, #8]
 800858e:	60da      	str	r2, [r3, #12]
 8008590:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008592:	2000      	movs	r0, #0
 8008594:	f001 f9f4 	bl	8009980 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008598:	2301      	movs	r3, #1
 800859a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800859c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80085a0:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085a2:	2302      	movs	r3, #2
 80085a4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085a6:	2303      	movs	r3, #3
 80085a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80085aa:	2306      	movs	r3, #6
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80085ae:	2355      	movs	r3, #85	@ 0x55
 80085b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085b2:	2302      	movs	r3, #2
 80085b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80085b6:	2302      	movs	r3, #2
 80085b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80085ba:	2302      	movs	r3, #2
 80085bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085be:	f107 0318 	add.w	r3, r7, #24
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fa90 	bl	8009ae8 <HAL_RCC_OscConfig>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <SystemClock_Config+0x62>
	{
		Error_Handler();
 80085ce:	f000 f818 	bl	8008602 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80085d2:	230f      	movs	r3, #15
 80085d4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085d6:	2303      	movs	r3, #3
 80085d8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80085de:	2300      	movs	r3, #0
 80085e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80085e6:	1d3b      	adds	r3, r7, #4
 80085e8:	2104      	movs	r1, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fd8e 	bl	800a10c <HAL_RCC_ClockConfig>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80085f6:	f000 f804 	bl	8008602 <Error_Handler>
	}
}
 80085fa:	bf00      	nop
 80085fc:	3750      	adds	r7, #80	@ 0x50
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8008602:	b480      	push	{r7}
 8008604:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008606:	b672      	cpsid	i
}
 8008608:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800860a:	bf00      	nop
 800860c:	e7fd      	b.n	800860a <Error_Handler+0x8>
	...

08008610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008616:	4b0f      	ldr	r3, [pc, #60]	@ (8008654 <HAL_MspInit+0x44>)
 8008618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800861a:	4a0e      	ldr	r2, [pc, #56]	@ (8008654 <HAL_MspInit+0x44>)
 800861c:	f043 0301 	orr.w	r3, r3, #1
 8008620:	6613      	str	r3, [r2, #96]	@ 0x60
 8008622:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <HAL_MspInit+0x44>)
 8008624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	607b      	str	r3, [r7, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <HAL_MspInit+0x44>)
 8008630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008632:	4a08      	ldr	r2, [pc, #32]	@ (8008654 <HAL_MspInit+0x44>)
 8008634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008638:	6593      	str	r3, [r2, #88]	@ 0x58
 800863a:	4b06      	ldr	r3, [pc, #24]	@ (8008654 <HAL_MspInit+0x44>)
 800863c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800863e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008646:	f001 fa3f 	bl	8009ac8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40021000 	.word	0x40021000

08008658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <NMI_Handler+0x4>

08008660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <HardFault_Handler+0x4>

08008668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800866c:	bf00      	nop
 800866e:	e7fd      	b.n	800866c <MemManage_Handler+0x4>

08008670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008674:	bf00      	nop
 8008676:	e7fd      	b.n	8008674 <BusFault_Handler+0x4>

08008678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800867c:	bf00      	nop
 800867e:	e7fd      	b.n	800867c <UsageFault_Handler+0x4>

08008680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008684:	bf00      	nop
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800868e:	b480      	push	{r7}
 8008690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008692:	bf00      	nop
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086a0:	bf00      	nop
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086ae:	f000 f89b 	bl	80087e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086b2:	bf00      	nop
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80086bc:	4802      	ldr	r0, [pc, #8]	@ (80086c8 <FDCAN1_IT0_IRQHandler+0x10>)
 80086be:	f000 fd29 	bl	8009114 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000028 	.word	0x20000028

080086cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80086d0:	4b06      	ldr	r3, [pc, #24]	@ (80086ec <SystemInit+0x20>)
 80086d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d6:	4a05      	ldr	r2, [pc, #20]	@ (80086ec <SystemInit+0x20>)
 80086d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086e0:	bf00      	nop
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	e000ed00 	.word	0xe000ed00

080086f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80086f0:	480d      	ldr	r0, [pc, #52]	@ (8008728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80086f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80086f4:	f7ff ffea 	bl	80086cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086f8:	480c      	ldr	r0, [pc, #48]	@ (800872c <LoopForever+0x6>)
  ldr r1, =_edata
 80086fa:	490d      	ldr	r1, [pc, #52]	@ (8008730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80086fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008734 <LoopForever+0xe>)
  movs r3, #0
 80086fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008700:	e002      	b.n	8008708 <LoopCopyDataInit>

08008702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008706:	3304      	adds	r3, #4

08008708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800870a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800870c:	d3f9      	bcc.n	8008702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800870e:	4a0a      	ldr	r2, [pc, #40]	@ (8008738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008710:	4c0a      	ldr	r4, [pc, #40]	@ (800873c <LoopForever+0x16>)
  movs r3, #0
 8008712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008714:	e001      	b.n	800871a <LoopFillZerobss>

08008716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008718:	3204      	adds	r2, #4

0800871a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800871a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800871c:	d3fb      	bcc.n	8008716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800871e:	f002 f92f 	bl	800a980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008722:	f7ff fed5 	bl	80084d0 <main>

08008726 <LoopForever>:

LoopForever:
    b LoopForever
 8008726:	e7fe      	b.n	8008726 <LoopForever>
  ldr   r0, =_estack
 8008728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800872c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008730:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008734:	0800aa10 	.word	0x0800aa10
  ldr r2, =_sbss
 8008738:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800873c:	20000090 	.word	0x20000090

08008740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008740:	e7fe      	b.n	8008740 <ADC1_2_IRQHandler>

08008742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800874c:	2003      	movs	r0, #3
 800874e:	f000 f95b 	bl	8008a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008752:	200f      	movs	r0, #15
 8008754:	f000 f80e 	bl	8008774 <HAL_InitTick>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	71fb      	strb	r3, [r7, #7]
 8008762:	e001      	b.n	8008768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008764:	f7ff ff54 	bl	8008610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008768:	79fb      	ldrb	r3, [r7, #7]

}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008780:	4b16      	ldr	r3, [pc, #88]	@ (80087dc <HAL_InitTick+0x68>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d022      	beq.n	80087ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008788:	4b15      	ldr	r3, [pc, #84]	@ (80087e0 <HAL_InitTick+0x6c>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <HAL_InitTick+0x68>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008794:	fbb1 f3f3 	udiv	r3, r1, r3
 8008798:	fbb2 f3f3 	udiv	r3, r2, r3
 800879c:	4618      	mov	r0, r3
 800879e:	f000 f966 	bl	8008a6e <HAL_SYSTICK_Config>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10f      	bne.n	80087c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b0f      	cmp	r3, #15
 80087ac:	d809      	bhi.n	80087c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087ae:	2200      	movs	r2, #0
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087b6:	f000 f932 	bl	8008a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80087ba:	4a0a      	ldr	r2, [pc, #40]	@ (80087e4 <HAL_InitTick+0x70>)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	e007      	b.n	80087d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	e004      	b.n	80087d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
 80087cc:	e001      	b.n	80087d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20000008 	.word	0x20000008
 80087e0:	20000000 	.word	0x20000000
 80087e4:	20000004 	.word	0x20000004

080087e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087ec:	4b05      	ldr	r3, [pc, #20]	@ (8008804 <HAL_IncTick+0x1c>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	4b05      	ldr	r3, [pc, #20]	@ (8008808 <HAL_IncTick+0x20>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4413      	add	r3, r2
 80087f6:	4a03      	ldr	r2, [pc, #12]	@ (8008804 <HAL_IncTick+0x1c>)
 80087f8:	6013      	str	r3, [r2, #0]
}
 80087fa:	bf00      	nop
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	2000008c 	.word	0x2000008c
 8008808:	20000008 	.word	0x20000008

0800880c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
  return uwTick;
 8008810:	4b03      	ldr	r3, [pc, #12]	@ (8008820 <HAL_GetTick+0x14>)
 8008812:	681b      	ldr	r3, [r3, #0]
}
 8008814:	4618      	mov	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	2000008c 	.word	0x2000008c

08008824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800882c:	f7ff ffee 	bl	800880c <HAL_GetTick>
 8008830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800883c:	d004      	beq.n	8008848 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800883e:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <HAL_Delay+0x40>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008848:	bf00      	nop
 800884a:	f7ff ffdf 	bl	800880c <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	429a      	cmp	r2, r3
 8008858:	d8f7      	bhi.n	800884a <HAL_Delay+0x26>
  {
  }
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000008 	.word	0x20000008

08008868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008878:	4b0c      	ldr	r3, [pc, #48]	@ (80088ac <__NVIC_SetPriorityGrouping+0x44>)
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008884:	4013      	ands	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800889a:	4a04      	ldr	r2, [pc, #16]	@ (80088ac <__NVIC_SetPriorityGrouping+0x44>)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	60d3      	str	r3, [r2, #12]
}
 80088a0:	bf00      	nop
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	e000ed00 	.word	0xe000ed00

080088b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088b4:	4b04      	ldr	r3, [pc, #16]	@ (80088c8 <__NVIC_GetPriorityGrouping+0x18>)
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	0a1b      	lsrs	r3, r3, #8
 80088ba:	f003 0307 	and.w	r3, r3, #7
}
 80088be:	4618      	mov	r0, r3
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	e000ed00 	.word	0xe000ed00

080088cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	db0b      	blt.n	80088f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	f003 021f 	and.w	r2, r3, #31
 80088e4:	4907      	ldr	r1, [pc, #28]	@ (8008904 <__NVIC_EnableIRQ+0x38>)
 80088e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ea:	095b      	lsrs	r3, r3, #5
 80088ec:	2001      	movs	r0, #1
 80088ee:	fa00 f202 	lsl.w	r2, r0, r2
 80088f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	e000e100 	.word	0xe000e100

08008908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	6039      	str	r1, [r7, #0]
 8008912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008918:	2b00      	cmp	r3, #0
 800891a:	db0a      	blt.n	8008932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	b2da      	uxtb	r2, r3
 8008920:	490c      	ldr	r1, [pc, #48]	@ (8008954 <__NVIC_SetPriority+0x4c>)
 8008922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008926:	0112      	lsls	r2, r2, #4
 8008928:	b2d2      	uxtb	r2, r2
 800892a:	440b      	add	r3, r1
 800892c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008930:	e00a      	b.n	8008948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	b2da      	uxtb	r2, r3
 8008936:	4908      	ldr	r1, [pc, #32]	@ (8008958 <__NVIC_SetPriority+0x50>)
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	3b04      	subs	r3, #4
 8008940:	0112      	lsls	r2, r2, #4
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	440b      	add	r3, r1
 8008946:	761a      	strb	r2, [r3, #24]
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	e000e100 	.word	0xe000e100
 8008958:	e000ed00 	.word	0xe000ed00

0800895c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800895c:	b480      	push	{r7}
 800895e:	b089      	sub	sp, #36	@ 0x24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f1c3 0307 	rsb	r3, r3, #7
 8008976:	2b04      	cmp	r3, #4
 8008978:	bf28      	it	cs
 800897a:	2304      	movcs	r3, #4
 800897c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	3304      	adds	r3, #4
 8008982:	2b06      	cmp	r3, #6
 8008984:	d902      	bls.n	800898c <NVIC_EncodePriority+0x30>
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3b03      	subs	r3, #3
 800898a:	e000      	b.n	800898e <NVIC_EncodePriority+0x32>
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	fa02 f303 	lsl.w	r3, r2, r3
 800899a:	43da      	mvns	r2, r3
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	401a      	ands	r2, r3
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	fa01 f303 	lsl.w	r3, r1, r3
 80089ae:	43d9      	mvns	r1, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089b4:	4313      	orrs	r3, r2
         );
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3724      	adds	r7, #36	@ 0x24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089d4:	d301      	bcc.n	80089da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089d6:	2301      	movs	r3, #1
 80089d8:	e00f      	b.n	80089fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089da:	4a0a      	ldr	r2, [pc, #40]	@ (8008a04 <SysTick_Config+0x40>)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3b01      	subs	r3, #1
 80089e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089e2:	210f      	movs	r1, #15
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089e8:	f7ff ff8e 	bl	8008908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <SysTick_Config+0x40>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089f2:	4b04      	ldr	r3, [pc, #16]	@ (8008a04 <SysTick_Config+0x40>)
 80089f4:	2207      	movs	r2, #7
 80089f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	e000e010 	.word	0xe000e010

08008a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff ff29 	bl	8008868 <__NVIC_SetPriorityGrouping>
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b086      	sub	sp, #24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	4603      	mov	r3, r0
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
 8008a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008a2c:	f7ff ff40 	bl	80088b0 <__NVIC_GetPriorityGrouping>
 8008a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f7ff ff90 	bl	800895c <NVIC_EncodePriority>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff ff5f 	bl	8008908 <__NVIC_SetPriority>
}
 8008a4a:	bf00      	nop
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	4603      	mov	r3, r0
 8008a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff ff33 	bl	80088cc <__NVIC_EnableIRQ>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff ffa4 	bl	80089c4 <SysTick_Config>
 8008a7c:	4603      	mov	r3, r0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e147      	b.n	8008d2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff fbf8 	bl	80082a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0210 	bic.w	r2, r2, #16
 8008ac2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ac4:	f7ff fea2 	bl	800880c <HAL_GetTick>
 8008ac8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008aca:	e012      	b.n	8008af2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008acc:	f7ff fe9e 	bl	800880c <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b0a      	cmp	r3, #10
 8008ad8:	d90b      	bls.n	8008af2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ade:	f043 0201 	orr.w	r2, r3, #1
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e11b      	b.n	8008d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d0e5      	beq.n	8008acc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699a      	ldr	r2, [r3, #24]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0201 	orr.w	r2, r2, #1
 8008b0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b10:	f7ff fe7c 	bl	800880c <HAL_GetTick>
 8008b14:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008b16:	e012      	b.n	8008b3e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008b18:	f7ff fe78 	bl	800880c <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b0a      	cmp	r3, #10
 8008b24:	d90b      	bls.n	8008b3e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b2a:	f043 0201 	orr.w	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2203      	movs	r2, #3
 8008b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e0f5      	b.n	8008d2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0e5      	beq.n	8008b18 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0202 	orr.w	r2, r2, #2
 8008b5a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a74      	ldr	r2, [pc, #464]	@ (8008d34 <HAL_FDCAN_Init+0x2ac>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d103      	bne.n	8008b6e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008b66:	4a74      	ldr	r2, [pc, #464]	@ (8008d38 <HAL_FDCAN_Init+0x2b0>)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7c1b      	ldrb	r3, [r3, #16]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d108      	bne.n	8008b88 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699a      	ldr	r2, [r3, #24]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b84:	619a      	str	r2, [r3, #24]
 8008b86:	e007      	b.n	8008b98 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b96:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7c5b      	ldrb	r3, [r3, #17]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d108      	bne.n	8008bb2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699a      	ldr	r2, [r3, #24]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bae:	619a      	str	r2, [r3, #24]
 8008bb0:	e007      	b.n	8008bc2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008bc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7c9b      	ldrb	r3, [r3, #18]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d108      	bne.n	8008bdc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	699a      	ldr	r2, [r3, #24]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008bd8:	619a      	str	r2, [r3, #24]
 8008bda:	e007      	b.n	8008bec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699a      	ldr	r2, [r3, #24]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008bea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	699a      	ldr	r2, [r3, #24]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008c10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0210 	bic.w	r2, r2, #16
 8008c20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d108      	bne.n	8008c3c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	699a      	ldr	r2, [r3, #24]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f042 0204 	orr.w	r2, r2, #4
 8008c38:	619a      	str	r2, [r3, #24]
 8008c3a:	e02c      	b.n	8008c96 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d028      	beq.n	8008c96 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d01c      	beq.n	8008c86 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008c5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	691a      	ldr	r2, [r3, #16]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0210 	orr.w	r2, r2, #16
 8008c6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d110      	bne.n	8008c96 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699a      	ldr	r2, [r3, #24]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0220 	orr.w	r2, r2, #32
 8008c82:	619a      	str	r2, [r3, #24]
 8008c84:	e007      	b.n	8008c96 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	699a      	ldr	r2, [r3, #24]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f042 0220 	orr.w	r2, r2, #32
 8008c94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008ca6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008cae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008cbe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008cc0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cca:	d115      	bne.n	8008cf8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008cda:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008ce4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	3b01      	subs	r3, #1
 8008cee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008cf4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008cf6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fb9a 	bl	8009448 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40006400 	.word	0x40006400
 8008d38:	40006500 	.word	0x40006500

08008d3c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d4c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d002      	beq.n	8008d5a <HAL_FDCAN_ConfigFilter+0x1e>
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d13d      	bne.n	8008dd6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d119      	bne.n	8008d96 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d6e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008d76:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e01d      	b.n	8008dd2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	075a      	lsls	r2, r3, #29
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	079a      	lsls	r2, r3, #30
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e006      	b.n	8008de4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dda:	f043 0202 	orr.w	r2, r3, #2
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
  }
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	371c      	adds	r7, #28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d110      	bne.n	8008e26 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699a      	ldr	r2, [r3, #24]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 0201 	bic.w	r2, r2, #1
 8008e1a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e006      	b.n	8008e34 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e2a:	f043 0204 	orr.w	r2, r3, #4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
  }
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d12c      	bne.n	8008eb2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e023      	b.n	8008ec0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008e80:	0c1b      	lsrs	r3, r3, #16
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fb46 	bl	8009520 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2101      	movs	r1, #1
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8008ea0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	409a      	lsls	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e006      	b.n	8008ec0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eb6:	f043 0208 	orr.w	r2, r3, #8
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b08b      	sub	sp, #44	@ 0x2c
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008ee0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008ee2:	7efb      	ldrb	r3, [r7, #27]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	f040 80e8 	bne.w	80090ba <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b40      	cmp	r3, #64	@ 0x40
 8008eee:	d137      	bne.n	8008f60 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d107      	bne.n	8008f10 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e0db      	b.n	80090c8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f18:	0e1b      	lsrs	r3, r3, #24
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d10a      	bne.n	8008f38 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2a:	0a5b      	lsrs	r3, r3, #9
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008f34:	2301      	movs	r3, #1
 8008f36:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	69fa      	ldr	r2, [r7, #28]
 8008f48:	4413      	add	r3, r2
 8008f4a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	4613      	mov	r3, r2
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4413      	add	r3, r2
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	440b      	add	r3, r1
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f5e:	e036      	b.n	8008fce <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d107      	bne.n	8008f80 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0a3      	b.n	80090c8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f88:	0e1b      	lsrs	r3, r3, #24
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d10a      	bne.n	8008fa8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fb0:	0a1b      	lsrs	r3, r3, #8
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	4413      	add	r3, r2
 8008fba:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	440b      	add	r3, r1
 8008fcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d107      	bne.n	8008ff2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	0c9b      	lsrs	r3, r3, #18
 8008fe8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e005      	b.n	8008ffe <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	3304      	adds	r3, #4
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	b29a      	uxth	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8009026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	0c1b      	lsrs	r3, r3, #16
 800902c:	f003 020f 	and.w	r2, r3, #15
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	0e1b      	lsrs	r3, r3, #24
 8009052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	0fda      	lsrs	r2, r3, #31
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	3304      	adds	r3, #4
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800906e:	2300      	movs	r3, #0
 8009070:	623b      	str	r3, [r7, #32]
 8009072:	e00a      	b.n	800908a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	441a      	add	r2, r3
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	440b      	add	r3, r1
 8009080:	7812      	ldrb	r2, [r2, #0]
 8009082:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	3301      	adds	r3, #1
 8009088:	623b      	str	r3, [r7, #32]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	4a11      	ldr	r2, [pc, #68]	@ (80090d4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8009090:	5cd3      	ldrb	r3, [r2, r3]
 8009092:	461a      	mov	r2, r3
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	4293      	cmp	r3, r2
 8009098:	d3ec      	bcc.n	8009074 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b40      	cmp	r3, #64	@ 0x40
 800909e:	d105      	bne.n	80090ac <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80090aa:	e004      	b.n	80090b6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e006      	b.n	80090c8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090be:	f043 0208 	orr.w	r2, r3, #8
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
  }
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	372c      	adds	r7, #44	@ 0x2c
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	0800a9f8 	.word	0x0800a9f8

080090d8 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b40      	cmp	r3, #64	@ 0x40
 80090e6:	d107      	bne.n	80090f8 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090f0:	f003 030f 	and.w	r3, r3, #15
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e006      	b.n	8009106 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009100:	f003 030f 	and.w	r3, r3, #15
 8009104:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8009106:	68fb      	ldr	r3, [r7, #12]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	@ 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009122:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8009126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009130:	4013      	ands	r3, r2
 8009132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009148:	4013      	ands	r3, r2
 800914a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009152:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009156:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009160:	4013      	ands	r3, r2
 8009162:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800916a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800916e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009176:	6a3a      	ldr	r2, [r7, #32]
 8009178:	4013      	ands	r3, r2
 800917a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009182:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8009186:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800918e:	69fa      	ldr	r2, [r7, #28]
 8009190:	4013      	ands	r3, r2
 8009192:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800919a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00b      	beq.n	80091c6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d006      	beq.n	80091c6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2240      	movs	r2, #64	@ 0x40
 80091be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f921 	bl	8009408 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d019      	beq.n	8009204 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d014      	beq.n	8009204 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80091e2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	4013      	ands	r3, r2
 80091f0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80091fc:	6939      	ldr	r1, [r7, #16]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f8e3 	bl	80093ca <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d007      	beq.n	800921a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009210:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f8a2 	bl	800935e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009226:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f8a2 	bl	8009374 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800923e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f8a2 	bl	800938a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00c      	beq.n	800926a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009262:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f89b 	bl	80093a0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009270:	2b00      	cmp	r3, #0
 8009272:	d018      	beq.n	80092a6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800927a:	2b00      	cmp	r3, #0
 800927c:	d013      	beq.n	80092a6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009286:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4013      	ands	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2280      	movs	r2, #128	@ 0x80
 800929c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f887 	bl	80093b4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00c      	beq.n	80092ca <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80092c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f88b 	bl	80093e0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00c      	beq.n	80092ee <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d007      	beq.n	80092ee <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80092e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f883 	bl	80093f4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00f      	beq.n	8009318 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800930a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009310:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d007      	beq.n	800932e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69fa      	ldr	r2, [r7, #28]
 8009324:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009326:	69f9      	ldr	r1, [r7, #28]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f881 	bl	8009430 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6a3a      	ldr	r2, [r7, #32]
 800933a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f863 	bl	800941c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009356:	bf00      	nop
 8009358:	3730      	adds	r7, #48	@ 0x30
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
	...

08009448 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009450:	4b30      	ldr	r3, [pc, #192]	@ (8009514 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009452:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a2f      	ldr	r2, [pc, #188]	@ (8009518 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d103      	bne.n	8009466 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009464:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a2c      	ldr	r2, [pc, #176]	@ (800951c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d103      	bne.n	8009478 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8009476:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009486:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800948e:	041a      	lsls	r2, r3, #16
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094ac:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b4:	061a      	lsls	r2, r3, #24
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e005      	b.n	80094fa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3304      	adds	r3, #4
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	429a      	cmp	r2, r3
 8009504:	d3f3      	bcc.n	80094ee <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8009506:	bf00      	nop
 8009508:	bf00      	nop
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	4000a400 	.word	0x4000a400
 8009518:	40006800 	.word	0x40006800
 800951c:	40006c00 	.word	0x40006c00

08009520 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8009520:	b480      	push	{r7}
 8009522:	b089      	sub	sp, #36	@ 0x24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
 800952c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800953e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8009546:	4313      	orrs	r3, r2
 8009548:	61fb      	str	r3, [r7, #28]
 800954a:	e00a      	b.n	8009562 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8009554:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800955a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800955c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009560:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800956c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8009572:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8009578:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8009580:	4313      	orrs	r3, r2
 8009582:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	4613      	mov	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	4413      	add	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	440b      	add	r3, r1
 8009594:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	3304      	adds	r3, #4
 80095a0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	3304      	adds	r3, #4
 80095ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	e020      	b.n	80095f6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	3303      	adds	r3, #3
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	4413      	add	r3, r2
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	3302      	adds	r3, #2
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	440b      	add	r3, r1
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80095cc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	3301      	adds	r3, #1
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	440b      	add	r3, r1
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80095da:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	440a      	add	r2, r1
 80095e2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80095e4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	3304      	adds	r3, #4
 80095ee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	3304      	adds	r3, #4
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	4a06      	ldr	r2, [pc, #24]	@ (8009614 <FDCAN_CopyMessageToRAM+0xf4>)
 80095fc:	5cd3      	ldrb	r3, [r2, r3]
 80095fe:	461a      	mov	r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	4293      	cmp	r3, r2
 8009604:	d3d6      	bcc.n	80095b4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	3724      	adds	r7, #36	@ 0x24
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	0800a9f8 	.word	0x0800a9f8

08009618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009622:	2300      	movs	r3, #0
 8009624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009626:	e15a      	b.n	80098de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	2101      	movs	r1, #1
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	fa01 f303 	lsl.w	r3, r1, r3
 8009634:	4013      	ands	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 814c 	beq.w	80098d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2b01      	cmp	r3, #1
 800964a:	d005      	beq.n	8009658 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009654:	2b02      	cmp	r3, #2
 8009656:	d130      	bne.n	80096ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	2203      	movs	r2, #3
 8009664:	fa02 f303 	lsl.w	r3, r2, r3
 8009668:	43db      	mvns	r3, r3
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4013      	ands	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	fa02 f303 	lsl.w	r3, r2, r3
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800968e:	2201      	movs	r2, #1
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	fa02 f303 	lsl.w	r3, r2, r3
 8009696:	43db      	mvns	r3, r3
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	4013      	ands	r3, r2
 800969c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	091b      	lsrs	r3, r3, #4
 80096a4:	f003 0201 	and.w	r2, r3, #1
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	fa02 f303 	lsl.w	r3, r2, r3
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d017      	beq.n	80096f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	2203      	movs	r2, #3
 80096d2:	fa02 f303 	lsl.w	r3, r2, r3
 80096d6:	43db      	mvns	r3, r3
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	4013      	ands	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d123      	bne.n	800974a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	08da      	lsrs	r2, r3, #3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3208      	adds	r2, #8
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f003 0307 	and.w	r3, r3, #7
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	220f      	movs	r2, #15
 800971a:	fa02 f303 	lsl.w	r3, r2, r3
 800971e:	43db      	mvns	r3, r3
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4013      	ands	r3, r2
 8009724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	691a      	ldr	r2, [r3, #16]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f003 0307 	and.w	r3, r3, #7
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	fa02 f303 	lsl.w	r3, r2, r3
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4313      	orrs	r3, r2
 800973a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	08da      	lsrs	r2, r3, #3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3208      	adds	r2, #8
 8009744:	6939      	ldr	r1, [r7, #16]
 8009746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	2203      	movs	r2, #3
 8009756:	fa02 f303 	lsl.w	r3, r2, r3
 800975a:	43db      	mvns	r3, r3
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4013      	ands	r3, r2
 8009760:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f003 0203 	and.w	r2, r3, #3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	fa02 f303 	lsl.w	r3, r2, r3
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	4313      	orrs	r3, r2
 8009776:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80a6 	beq.w	80098d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800978c:	4b5b      	ldr	r3, [pc, #364]	@ (80098fc <HAL_GPIO_Init+0x2e4>)
 800978e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009790:	4a5a      	ldr	r2, [pc, #360]	@ (80098fc <HAL_GPIO_Init+0x2e4>)
 8009792:	f043 0301 	orr.w	r3, r3, #1
 8009796:	6613      	str	r3, [r2, #96]	@ 0x60
 8009798:	4b58      	ldr	r3, [pc, #352]	@ (80098fc <HAL_GPIO_Init+0x2e4>)
 800979a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	60bb      	str	r3, [r7, #8]
 80097a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80097a4:	4a56      	ldr	r2, [pc, #344]	@ (8009900 <HAL_GPIO_Init+0x2e8>)
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	089b      	lsrs	r3, r3, #2
 80097aa:	3302      	adds	r3, #2
 80097ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f003 0303 	and.w	r3, r3, #3
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	220f      	movs	r2, #15
 80097bc:	fa02 f303 	lsl.w	r3, r2, r3
 80097c0:	43db      	mvns	r3, r3
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	4013      	ands	r3, r2
 80097c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80097ce:	d01f      	beq.n	8009810 <HAL_GPIO_Init+0x1f8>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a4c      	ldr	r2, [pc, #304]	@ (8009904 <HAL_GPIO_Init+0x2ec>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d019      	beq.n	800980c <HAL_GPIO_Init+0x1f4>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a4b      	ldr	r2, [pc, #300]	@ (8009908 <HAL_GPIO_Init+0x2f0>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d013      	beq.n	8009808 <HAL_GPIO_Init+0x1f0>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a4a      	ldr	r2, [pc, #296]	@ (800990c <HAL_GPIO_Init+0x2f4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00d      	beq.n	8009804 <HAL_GPIO_Init+0x1ec>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a49      	ldr	r2, [pc, #292]	@ (8009910 <HAL_GPIO_Init+0x2f8>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d007      	beq.n	8009800 <HAL_GPIO_Init+0x1e8>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a48      	ldr	r2, [pc, #288]	@ (8009914 <HAL_GPIO_Init+0x2fc>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d101      	bne.n	80097fc <HAL_GPIO_Init+0x1e4>
 80097f8:	2305      	movs	r3, #5
 80097fa:	e00a      	b.n	8009812 <HAL_GPIO_Init+0x1fa>
 80097fc:	2306      	movs	r3, #6
 80097fe:	e008      	b.n	8009812 <HAL_GPIO_Init+0x1fa>
 8009800:	2304      	movs	r3, #4
 8009802:	e006      	b.n	8009812 <HAL_GPIO_Init+0x1fa>
 8009804:	2303      	movs	r3, #3
 8009806:	e004      	b.n	8009812 <HAL_GPIO_Init+0x1fa>
 8009808:	2302      	movs	r3, #2
 800980a:	e002      	b.n	8009812 <HAL_GPIO_Init+0x1fa>
 800980c:	2301      	movs	r3, #1
 800980e:	e000      	b.n	8009812 <HAL_GPIO_Init+0x1fa>
 8009810:	2300      	movs	r3, #0
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	f002 0203 	and.w	r2, r2, #3
 8009818:	0092      	lsls	r2, r2, #2
 800981a:	4093      	lsls	r3, r2
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009822:	4937      	ldr	r1, [pc, #220]	@ (8009900 <HAL_GPIO_Init+0x2e8>)
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	089b      	lsrs	r3, r3, #2
 8009828:	3302      	adds	r3, #2
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009830:	4b39      	ldr	r3, [pc, #228]	@ (8009918 <HAL_GPIO_Init+0x300>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	43db      	mvns	r3, r3
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	4013      	ands	r3, r2
 800983e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009854:	4a30      	ldr	r2, [pc, #192]	@ (8009918 <HAL_GPIO_Init+0x300>)
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800985a:	4b2f      	ldr	r3, [pc, #188]	@ (8009918 <HAL_GPIO_Init+0x300>)
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	43db      	mvns	r3, r3
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4013      	ands	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800987e:	4a26      	ldr	r2, [pc, #152]	@ (8009918 <HAL_GPIO_Init+0x300>)
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009884:	4b24      	ldr	r3, [pc, #144]	@ (8009918 <HAL_GPIO_Init+0x300>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	43db      	mvns	r3, r3
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	4013      	ands	r3, r2
 8009892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80098a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009918 <HAL_GPIO_Init+0x300>)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80098ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009918 <HAL_GPIO_Init+0x300>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	43db      	mvns	r3, r3
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4013      	ands	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80098d2:	4a11      	ldr	r2, [pc, #68]	@ (8009918 <HAL_GPIO_Init+0x300>)
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	3301      	adds	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f47f ae9d 	bne.w	8009628 <HAL_GPIO_Init+0x10>
  }
}
 80098ee:	bf00      	nop
 80098f0:	bf00      	nop
 80098f2:	371c      	adds	r7, #28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	40021000 	.word	0x40021000
 8009900:	40010000 	.word	0x40010000
 8009904:	48000400 	.word	0x48000400
 8009908:	48000800 	.word	0x48000800
 800990c:	48000c00 	.word	0x48000c00
 8009910:	48001000 	.word	0x48001000
 8009914:	48001400 	.word	0x48001400
 8009918:	40010400 	.word	0x40010400

0800991c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	807b      	strh	r3, [r7, #2]
 8009928:	4613      	mov	r3, r2
 800992a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800992c:	787b      	ldrb	r3, [r7, #1]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009932:	887a      	ldrh	r2, [r7, #2]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009938:	e002      	b.n	8009940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800993a:	887a      	ldrh	r2, [r7, #2]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800995e:	887a      	ldrh	r2, [r7, #2]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4013      	ands	r3, r2
 8009964:	041a      	lsls	r2, r3, #16
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	43d9      	mvns	r1, r3
 800996a:	887b      	ldrh	r3, [r7, #2]
 800996c:	400b      	ands	r3, r1
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	619a      	str	r2, [r3, #24]
}
 8009974:	bf00      	nop
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d141      	bne.n	8009a12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800998e:	4b4b      	ldr	r3, [pc, #300]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800999a:	d131      	bne.n	8009a00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800999c:	4b47      	ldr	r3, [pc, #284]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800999e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a2:	4a46      	ldr	r2, [pc, #280]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80099ac:	4b43      	ldr	r3, [pc, #268]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80099b4:	4a41      	ldr	r2, [pc, #260]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80099ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80099bc:	4b40      	ldr	r3, [pc, #256]	@ (8009ac0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2232      	movs	r2, #50	@ 0x32
 80099c2:	fb02 f303 	mul.w	r3, r2, r3
 80099c6:	4a3f      	ldr	r2, [pc, #252]	@ (8009ac4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80099c8:	fba2 2303 	umull	r2, r3, r2, r3
 80099cc:	0c9b      	lsrs	r3, r3, #18
 80099ce:	3301      	adds	r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099d2:	e002      	b.n	80099da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099da:	4b38      	ldr	r3, [pc, #224]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e6:	d102      	bne.n	80099ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f2      	bne.n	80099d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80099ee:	4b33      	ldr	r3, [pc, #204]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099fa:	d158      	bne.n	8009aae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e057      	b.n	8009ab0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a00:	4b2e      	ldr	r3, [pc, #184]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a06:	4a2d      	ldr	r2, [pc, #180]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009a10:	e04d      	b.n	8009aae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a18:	d141      	bne.n	8009a9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009a1a:	4b28      	ldr	r3, [pc, #160]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a26:	d131      	bne.n	8009a8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a28:	4b24      	ldr	r3, [pc, #144]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2e:	4a23      	ldr	r2, [pc, #140]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a38:	4b20      	ldr	r3, [pc, #128]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009a40:	4a1e      	ldr	r2, [pc, #120]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009a48:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2232      	movs	r2, #50	@ 0x32
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	0c9b      	lsrs	r3, r3, #18
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a5e:	e002      	b.n	8009a66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a66:	4b15      	ldr	r3, [pc, #84]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a72:	d102      	bne.n	8009a7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1f2      	bne.n	8009a60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a7a:	4b10      	ldr	r3, [pc, #64]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a86:	d112      	bne.n	8009aae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e011      	b.n	8009ab0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a92:	4a0a      	ldr	r2, [pc, #40]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009a9c:	e007      	b.n	8009aae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009a9e:	4b07      	ldr	r3, [pc, #28]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009aa6:	4a05      	ldr	r2, [pc, #20]	@ (8009abc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009aac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	40007000 	.word	0x40007000
 8009ac0:	20000000 	.word	0x20000000
 8009ac4:	431bde83 	.word	0x431bde83

08009ac8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009acc:	4b05      	ldr	r3, [pc, #20]	@ (8009ae4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	4a04      	ldr	r2, [pc, #16]	@ (8009ae4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009ad2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ad6:	6093      	str	r3, [r2, #8]
}
 8009ad8:	bf00      	nop
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40007000 	.word	0x40007000

08009ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e2fe      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d075      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b06:	4b97      	ldr	r3, [pc, #604]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f003 030c 	and.w	r3, r3, #12
 8009b0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b10:	4b94      	ldr	r3, [pc, #592]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	2b0c      	cmp	r3, #12
 8009b1e:	d102      	bne.n	8009b26 <HAL_RCC_OscConfig+0x3e>
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d002      	beq.n	8009b2c <HAL_RCC_OscConfig+0x44>
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	2b08      	cmp	r3, #8
 8009b2a:	d10b      	bne.n	8009b44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b2c:	4b8d      	ldr	r3, [pc, #564]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d05b      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x108>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d157      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e2d9      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b4c:	d106      	bne.n	8009b5c <HAL_RCC_OscConfig+0x74>
 8009b4e:	4b85      	ldr	r3, [pc, #532]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a84      	ldr	r2, [pc, #528]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	e01d      	b.n	8009b98 <HAL_RCC_OscConfig+0xb0>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b64:	d10c      	bne.n	8009b80 <HAL_RCC_OscConfig+0x98>
 8009b66:	4b7f      	ldr	r3, [pc, #508]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b70:	6013      	str	r3, [r2, #0]
 8009b72:	4b7c      	ldr	r3, [pc, #496]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a7b      	ldr	r2, [pc, #492]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	e00b      	b.n	8009b98 <HAL_RCC_OscConfig+0xb0>
 8009b80:	4b78      	ldr	r3, [pc, #480]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a77      	ldr	r2, [pc, #476]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	4b75      	ldr	r3, [pc, #468]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a74      	ldr	r2, [pc, #464]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d013      	beq.n	8009bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba0:	f7fe fe34 	bl	800880c <HAL_GetTick>
 8009ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ba6:	e008      	b.n	8009bba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ba8:	f7fe fe30 	bl	800880c <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b64      	cmp	r3, #100	@ 0x64
 8009bb4:	d901      	bls.n	8009bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e29e      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bba:	4b6a      	ldr	r3, [pc, #424]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0f0      	beq.n	8009ba8 <HAL_RCC_OscConfig+0xc0>
 8009bc6:	e014      	b.n	8009bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc8:	f7fe fe20 	bl	800880c <HAL_GetTick>
 8009bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bce:	e008      	b.n	8009be2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bd0:	f7fe fe1c 	bl	800880c <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b64      	cmp	r3, #100	@ 0x64
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e28a      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009be2:	4b60      	ldr	r3, [pc, #384]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1f0      	bne.n	8009bd0 <HAL_RCC_OscConfig+0xe8>
 8009bee:	e000      	b.n	8009bf2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d075      	beq.n	8009cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bfe:	4b59      	ldr	r3, [pc, #356]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f003 030c 	and.w	r3, r3, #12
 8009c06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c08:	4b56      	ldr	r3, [pc, #344]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b0c      	cmp	r3, #12
 8009c16:	d102      	bne.n	8009c1e <HAL_RCC_OscConfig+0x136>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d002      	beq.n	8009c24 <HAL_RCC_OscConfig+0x13c>
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d11f      	bne.n	8009c64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c24:	4b4f      	ldr	r3, [pc, #316]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d005      	beq.n	8009c3c <HAL_RCC_OscConfig+0x154>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e25d      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c3c:	4b49      	ldr	r3, [pc, #292]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	061b      	lsls	r3, r3, #24
 8009c4a:	4946      	ldr	r1, [pc, #280]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009c50:	4b45      	ldr	r3, [pc, #276]	@ (8009d68 <HAL_RCC_OscConfig+0x280>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fd8d 	bl	8008774 <HAL_InitTick>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d043      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e249      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d023      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a3c      	ldr	r2, [pc, #240]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c78:	f7fe fdc8 	bl	800880c <HAL_GetTick>
 8009c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c7e:	e008      	b.n	8009c92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c80:	f7fe fdc4 	bl	800880c <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d901      	bls.n	8009c92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e232      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009c92:	4b34      	ldr	r3, [pc, #208]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0f0      	beq.n	8009c80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c9e:	4b31      	ldr	r3, [pc, #196]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	061b      	lsls	r3, r3, #24
 8009cac:	492d      	ldr	r1, [pc, #180]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	604b      	str	r3, [r1, #4]
 8009cb2:	e01a      	b.n	8009cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009cba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc0:	f7fe fda4 	bl	800880c <HAL_GetTick>
 8009cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cc6:	e008      	b.n	8009cda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cc8:	f7fe fda0 	bl	800880c <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d901      	bls.n	8009cda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e20e      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cda:	4b22      	ldr	r3, [pc, #136]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1f0      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x1e0>
 8009ce6:	e000      	b.n	8009cea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ce8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0308 	and.w	r3, r3, #8
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d041      	beq.n	8009d7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01c      	beq.n	8009d38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cfe:	4b19      	ldr	r3, [pc, #100]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d04:	4a17      	ldr	r2, [pc, #92]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009d06:	f043 0301 	orr.w	r3, r3, #1
 8009d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d0e:	f7fe fd7d 	bl	800880c <HAL_GetTick>
 8009d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d14:	e008      	b.n	8009d28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d16:	f7fe fd79 	bl	800880c <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d901      	bls.n	8009d28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e1e7      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d28:	4b0e      	ldr	r3, [pc, #56]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0ef      	beq.n	8009d16 <HAL_RCC_OscConfig+0x22e>
 8009d36:	e020      	b.n	8009d7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d38:	4b0a      	ldr	r3, [pc, #40]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d3e:	4a09      	ldr	r2, [pc, #36]	@ (8009d64 <HAL_RCC_OscConfig+0x27c>)
 8009d40:	f023 0301 	bic.w	r3, r3, #1
 8009d44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d48:	f7fe fd60 	bl	800880c <HAL_GetTick>
 8009d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d4e:	e00d      	b.n	8009d6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d50:	f7fe fd5c 	bl	800880c <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d906      	bls.n	8009d6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e1ca      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
 8009d62:	bf00      	nop
 8009d64:	40021000 	.word	0x40021000
 8009d68:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d6c:	4b8c      	ldr	r3, [pc, #560]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1ea      	bne.n	8009d50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 80a6 	beq.w	8009ed4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009d8c:	4b84      	ldr	r3, [pc, #528]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <HAL_RCC_OscConfig+0x2b4>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e000      	b.n	8009d9e <HAL_RCC_OscConfig+0x2b6>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00d      	beq.n	8009dbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009da2:	4b7f      	ldr	r3, [pc, #508]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da6:	4a7e      	ldr	r2, [pc, #504]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dae:	4b7c      	ldr	r3, [pc, #496]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009dbe:	4b79      	ldr	r3, [pc, #484]	@ (8009fa4 <HAL_RCC_OscConfig+0x4bc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d118      	bne.n	8009dfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009dca:	4b76      	ldr	r3, [pc, #472]	@ (8009fa4 <HAL_RCC_OscConfig+0x4bc>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a75      	ldr	r2, [pc, #468]	@ (8009fa4 <HAL_RCC_OscConfig+0x4bc>)
 8009dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009dd6:	f7fe fd19 	bl	800880c <HAL_GetTick>
 8009dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ddc:	e008      	b.n	8009df0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dde:	f7fe fd15 	bl	800880c <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d901      	bls.n	8009df0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e183      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009df0:	4b6c      	ldr	r3, [pc, #432]	@ (8009fa4 <HAL_RCC_OscConfig+0x4bc>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0f0      	beq.n	8009dde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d108      	bne.n	8009e16 <HAL_RCC_OscConfig+0x32e>
 8009e04:	4b66      	ldr	r3, [pc, #408]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e0a:	4a65      	ldr	r2, [pc, #404]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e0c:	f043 0301 	orr.w	r3, r3, #1
 8009e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009e14:	e024      	b.n	8009e60 <HAL_RCC_OscConfig+0x378>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	2b05      	cmp	r3, #5
 8009e1c:	d110      	bne.n	8009e40 <HAL_RCC_OscConfig+0x358>
 8009e1e:	4b60      	ldr	r3, [pc, #384]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e24:	4a5e      	ldr	r2, [pc, #376]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e26:	f043 0304 	orr.w	r3, r3, #4
 8009e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e34:	4a5a      	ldr	r2, [pc, #360]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e36:	f043 0301 	orr.w	r3, r3, #1
 8009e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009e3e:	e00f      	b.n	8009e60 <HAL_RCC_OscConfig+0x378>
 8009e40:	4b57      	ldr	r3, [pc, #348]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e46:	4a56      	ldr	r2, [pc, #344]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e48:	f023 0301 	bic.w	r3, r3, #1
 8009e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009e50:	4b53      	ldr	r3, [pc, #332]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e56:	4a52      	ldr	r2, [pc, #328]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e58:	f023 0304 	bic.w	r3, r3, #4
 8009e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d016      	beq.n	8009e96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e68:	f7fe fcd0 	bl	800880c <HAL_GetTick>
 8009e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e6e:	e00a      	b.n	8009e86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e70:	f7fe fccc 	bl	800880c <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e138      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e86:	4b46      	ldr	r3, [pc, #280]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e8c:	f003 0302 	and.w	r3, r3, #2
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0ed      	beq.n	8009e70 <HAL_RCC_OscConfig+0x388>
 8009e94:	e015      	b.n	8009ec2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e96:	f7fe fcb9 	bl	800880c <HAL_GetTick>
 8009e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e9c:	e00a      	b.n	8009eb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e9e:	f7fe fcb5 	bl	800880c <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d901      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e121      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1ed      	bne.n	8009e9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009ec2:	7ffb      	ldrb	r3, [r7, #31]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d105      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ec8:	4b35      	ldr	r3, [pc, #212]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ecc:	4a34      	ldr	r2, [pc, #208]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ed2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d03c      	beq.n	8009f5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01c      	beq.n	8009f22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eee:	4a2c      	ldr	r2, [pc, #176]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009ef0:	f043 0301 	orr.w	r3, r3, #1
 8009ef4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ef8:	f7fe fc88 	bl	800880c <HAL_GetTick>
 8009efc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009efe:	e008      	b.n	8009f12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f00:	f7fe fc84 	bl	800880c <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e0f2      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009f12:	4b23      	ldr	r3, [pc, #140]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f18:	f003 0302 	and.w	r3, r3, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0ef      	beq.n	8009f00 <HAL_RCC_OscConfig+0x418>
 8009f20:	e01b      	b.n	8009f5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f22:	4b1f      	ldr	r3, [pc, #124]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f28:	4a1d      	ldr	r2, [pc, #116]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009f2a:	f023 0301 	bic.w	r3, r3, #1
 8009f2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f32:	f7fe fc6b 	bl	800880c <HAL_GetTick>
 8009f36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f38:	e008      	b.n	8009f4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f3a:	f7fe fc67 	bl	800880c <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d901      	bls.n	8009f4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e0d5      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f4c:	4b14      	ldr	r3, [pc, #80]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1ef      	bne.n	8009f3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 80c9 	beq.w	800a0f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f64:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f003 030c 	and.w	r3, r3, #12
 8009f6c:	2b0c      	cmp	r3, #12
 8009f6e:	f000 8083 	beq.w	800a078 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d15e      	bne.n	800a038 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f7a:	4b09      	ldr	r3, [pc, #36]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a08      	ldr	r2, [pc, #32]	@ (8009fa0 <HAL_RCC_OscConfig+0x4b8>)
 8009f80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f86:	f7fe fc41 	bl	800880c <HAL_GetTick>
 8009f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f8c:	e00c      	b.n	8009fa8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f8e:	f7fe fc3d 	bl	800880c <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d905      	bls.n	8009fa8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e0ab      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
 8009fa0:	40021000 	.word	0x40021000
 8009fa4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fa8:	4b55      	ldr	r3, [pc, #340]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1ec      	bne.n	8009f8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fb4:	4b52      	ldr	r3, [pc, #328]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	4b52      	ldr	r3, [pc, #328]	@ (800a104 <HAL_RCC_OscConfig+0x61c>)
 8009fba:	4013      	ands	r3, r2
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6a11      	ldr	r1, [r2, #32]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009fc4:	3a01      	subs	r2, #1
 8009fc6:	0112      	lsls	r2, r2, #4
 8009fc8:	4311      	orrs	r1, r2
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009fce:	0212      	lsls	r2, r2, #8
 8009fd0:	4311      	orrs	r1, r2
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009fd6:	0852      	lsrs	r2, r2, #1
 8009fd8:	3a01      	subs	r2, #1
 8009fda:	0552      	lsls	r2, r2, #21
 8009fdc:	4311      	orrs	r1, r2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009fe2:	0852      	lsrs	r2, r2, #1
 8009fe4:	3a01      	subs	r2, #1
 8009fe6:	0652      	lsls	r2, r2, #25
 8009fe8:	4311      	orrs	r1, r2
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009fee:	06d2      	lsls	r2, r2, #27
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	4943      	ldr	r1, [pc, #268]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ff8:	4b41      	ldr	r3, [pc, #260]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a40      	ldr	r2, [pc, #256]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 8009ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a002:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a004:	4b3e      	ldr	r3, [pc, #248]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	4a3d      	ldr	r2, [pc, #244]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a00a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a00e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7fe fbfc 	bl	800880c <HAL_GetTick>
 800a014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a018:	f7fe fbf8 	bl	800880c <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e066      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a02a:	4b35      	ldr	r3, [pc, #212]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCC_OscConfig+0x530>
 800a036:	e05e      	b.n	800a0f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a038:	4b31      	ldr	r3, [pc, #196]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a30      	ldr	r2, [pc, #192]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a03e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a044:	f7fe fbe2 	bl	800880c <HAL_GetTick>
 800a048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a04a:	e008      	b.n	800a05e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a04c:	f7fe fbde 	bl	800880c <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e04c      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a05e:	4b28      	ldr	r3, [pc, #160]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1f0      	bne.n	800a04c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a06a:	4b25      	ldr	r3, [pc, #148]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	4924      	ldr	r1, [pc, #144]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a070:	4b25      	ldr	r3, [pc, #148]	@ (800a108 <HAL_RCC_OscConfig+0x620>)
 800a072:	4013      	ands	r3, r2
 800a074:	60cb      	str	r3, [r1, #12]
 800a076:	e03e      	b.n	800a0f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d101      	bne.n	800a084 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e039      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a084:	4b1e      	ldr	r3, [pc, #120]	@ (800a100 <HAL_RCC_OscConfig+0x618>)
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f003 0203 	and.w	r2, r3, #3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	429a      	cmp	r2, r3
 800a096:	d12c      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d123      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d11b      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d113      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d4:	085b      	lsrs	r3, r3, #1
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d109      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e8:	085b      	lsrs	r3, r3, #1
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d001      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	40021000 	.word	0x40021000
 800a104:	019f800c 	.word	0x019f800c
 800a108:	feeefffc 	.word	0xfeeefffc

0800a10c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e11e      	b.n	800a362 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a124:	4b91      	ldr	r3, [pc, #580]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d910      	bls.n	800a154 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a132:	4b8e      	ldr	r3, [pc, #568]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f023 020f 	bic.w	r2, r3, #15
 800a13a:	498c      	ldr	r1, [pc, #560]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	4313      	orrs	r3, r2
 800a140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a142:	4b8a      	ldr	r3, [pc, #552]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d001      	beq.n	800a154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e106      	b.n	800a362 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d073      	beq.n	800a248 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d129      	bne.n	800a1bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a168:	4b81      	ldr	r3, [pc, #516]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e0f4      	b.n	800a362 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a178:	f000 f966 	bl	800a448 <RCC_GetSysClockFreqFromPLLSource>
 800a17c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	4a7c      	ldr	r2, [pc, #496]	@ (800a374 <HAL_RCC_ClockConfig+0x268>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d93f      	bls.n	800a206 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a186:	4b7a      	ldr	r3, [pc, #488]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d009      	beq.n	800a1a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d033      	beq.n	800a206 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d12f      	bne.n	800a206 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a1a6:	4b72      	ldr	r3, [pc, #456]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1ae:	4a70      	ldr	r2, [pc, #448]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a1b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a1b6:	2380      	movs	r3, #128	@ 0x80
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	e024      	b.n	800a206 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d107      	bne.n	800a1d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1c4:	4b6a      	ldr	r3, [pc, #424]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e0c6      	b.n	800a362 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1d4:	4b66      	ldr	r3, [pc, #408]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e0be      	b.n	800a362 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a1e4:	f000 f8ce 	bl	800a384 <HAL_RCC_GetSysClockFreq>
 800a1e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	4a61      	ldr	r2, [pc, #388]	@ (800a374 <HAL_RCC_ClockConfig+0x268>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d909      	bls.n	800a206 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a1f2:	4b5f      	ldr	r3, [pc, #380]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1fa:	4a5d      	ldr	r2, [pc, #372]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a1fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a200:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a202:	2380      	movs	r3, #128	@ 0x80
 800a204:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a206:	4b5a      	ldr	r3, [pc, #360]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f023 0203 	bic.w	r2, r3, #3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4957      	ldr	r1, [pc, #348]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a214:	4313      	orrs	r3, r2
 800a216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a218:	f7fe faf8 	bl	800880c <HAL_GetTick>
 800a21c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a21e:	e00a      	b.n	800a236 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a220:	f7fe faf4 	bl	800880c <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a22e:	4293      	cmp	r3, r2
 800a230:	d901      	bls.n	800a236 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a232:	2303      	movs	r3, #3
 800a234:	e095      	b.n	800a362 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a236:	4b4e      	ldr	r3, [pc, #312]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f003 020c 	and.w	r2, r3, #12
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	429a      	cmp	r2, r3
 800a246:	d1eb      	bne.n	800a220 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0302 	and.w	r3, r3, #2
 800a250:	2b00      	cmp	r3, #0
 800a252:	d023      	beq.n	800a29c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0304 	and.w	r3, r3, #4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a260:	4b43      	ldr	r3, [pc, #268]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	4a42      	ldr	r2, [pc, #264]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a266:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a26a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0308 	and.w	r3, r3, #8
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a278:	4b3d      	ldr	r3, [pc, #244]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a280:	4a3b      	ldr	r2, [pc, #236]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a282:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a286:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a288:	4b39      	ldr	r3, [pc, #228]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	4936      	ldr	r1, [pc, #216]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a296:	4313      	orrs	r3, r2
 800a298:	608b      	str	r3, [r1, #8]
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2b80      	cmp	r3, #128	@ 0x80
 800a2a0:	d105      	bne.n	800a2ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a2a2:	4b33      	ldr	r3, [pc, #204]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	4a32      	ldr	r2, [pc, #200]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a2a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2ae:	4b2f      	ldr	r3, [pc, #188]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 030f 	and.w	r3, r3, #15
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d21d      	bcs.n	800a2f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f023 020f 	bic.w	r2, r3, #15
 800a2c4:	4929      	ldr	r1, [pc, #164]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a2cc:	f7fe fa9e 	bl	800880c <HAL_GetTick>
 800a2d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2d2:	e00a      	b.n	800a2ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2d4:	f7fe fa9a 	bl	800880c <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e03b      	b.n	800a362 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ea:	4b20      	ldr	r3, [pc, #128]	@ (800a36c <HAL_RCC_ClockConfig+0x260>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 030f 	and.w	r3, r3, #15
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d1ed      	bne.n	800a2d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d008      	beq.n	800a316 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a304:	4b1a      	ldr	r3, [pc, #104]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	4917      	ldr	r1, [pc, #92]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a312:	4313      	orrs	r3, r2
 800a314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0308 	and.w	r3, r3, #8
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a322:	4b13      	ldr	r3, [pc, #76]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	490f      	ldr	r1, [pc, #60]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a332:	4313      	orrs	r3, r2
 800a334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a336:	f000 f825 	bl	800a384 <HAL_RCC_GetSysClockFreq>
 800a33a:	4602      	mov	r2, r0
 800a33c:	4b0c      	ldr	r3, [pc, #48]	@ (800a370 <HAL_RCC_ClockConfig+0x264>)
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	091b      	lsrs	r3, r3, #4
 800a342:	f003 030f 	and.w	r3, r3, #15
 800a346:	490c      	ldr	r1, [pc, #48]	@ (800a378 <HAL_RCC_ClockConfig+0x26c>)
 800a348:	5ccb      	ldrb	r3, [r1, r3]
 800a34a:	f003 031f 	and.w	r3, r3, #31
 800a34e:	fa22 f303 	lsr.w	r3, r2, r3
 800a352:	4a0a      	ldr	r2, [pc, #40]	@ (800a37c <HAL_RCC_ClockConfig+0x270>)
 800a354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a356:	4b0a      	ldr	r3, [pc, #40]	@ (800a380 <HAL_RCC_ClockConfig+0x274>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fa0a 	bl	8008774 <HAL_InitTick>
 800a360:	4603      	mov	r3, r0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	40022000 	.word	0x40022000
 800a370:	40021000 	.word	0x40021000
 800a374:	04c4b400 	.word	0x04c4b400
 800a378:	0800a9e8 	.word	0x0800a9e8
 800a37c:	20000000 	.word	0x20000000
 800a380:	20000004 	.word	0x20000004

0800a384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a384:	b480      	push	{r7}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a38a:	4b2c      	ldr	r3, [pc, #176]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f003 030c 	and.w	r3, r3, #12
 800a392:	2b04      	cmp	r3, #4
 800a394:	d102      	bne.n	800a39c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a396:	4b2a      	ldr	r3, [pc, #168]	@ (800a440 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a398:	613b      	str	r3, [r7, #16]
 800a39a:	e047      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a39c:	4b27      	ldr	r3, [pc, #156]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f003 030c 	and.w	r3, r3, #12
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d102      	bne.n	800a3ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a3a8:	4b26      	ldr	r3, [pc, #152]	@ (800a444 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a3aa:	613b      	str	r3, [r7, #16]
 800a3ac:	e03e      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a3ae:	4b23      	ldr	r3, [pc, #140]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f003 030c 	and.w	r3, r3, #12
 800a3b6:	2b0c      	cmp	r3, #12
 800a3b8:	d136      	bne.n	800a428 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a3ba:	4b20      	ldr	r3, [pc, #128]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a3c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	091b      	lsrs	r3, r3, #4
 800a3ca:	f003 030f 	and.w	r3, r3, #15
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d10c      	bne.n	800a3f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a444 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e0:	4a16      	ldr	r2, [pc, #88]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3e2:	68d2      	ldr	r2, [r2, #12]
 800a3e4:	0a12      	lsrs	r2, r2, #8
 800a3e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a3ea:	fb02 f303 	mul.w	r3, r2, r3
 800a3ee:	617b      	str	r3, [r7, #20]
      break;
 800a3f0:	e00c      	b.n	800a40c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a3f2:	4a13      	ldr	r2, [pc, #76]	@ (800a440 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3fa:	4a10      	ldr	r2, [pc, #64]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a3fc:	68d2      	ldr	r2, [r2, #12]
 800a3fe:	0a12      	lsrs	r2, r2, #8
 800a400:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a404:	fb02 f303 	mul.w	r3, r2, r3
 800a408:	617b      	str	r3, [r7, #20]
      break;
 800a40a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a40c:	4b0b      	ldr	r3, [pc, #44]	@ (800a43c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	0e5b      	lsrs	r3, r3, #25
 800a412:	f003 0303 	and.w	r3, r3, #3
 800a416:	3301      	adds	r3, #1
 800a418:	005b      	lsls	r3, r3, #1
 800a41a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	fbb2 f3f3 	udiv	r3, r2, r3
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	e001      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a42c:	693b      	ldr	r3, [r7, #16]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40021000 	.word	0x40021000
 800a440:	00f42400 	.word	0x00f42400
 800a444:	016e3600 	.word	0x016e3600

0800a448 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a44e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a458:	4b1b      	ldr	r3, [pc, #108]	@ (800a4c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	091b      	lsrs	r3, r3, #4
 800a45e:	f003 030f 	and.w	r3, r3, #15
 800a462:	3301      	adds	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d10c      	bne.n	800a486 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a46c:	4a17      	ldr	r2, [pc, #92]	@ (800a4cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	fbb2 f3f3 	udiv	r3, r2, r3
 800a474:	4a14      	ldr	r2, [pc, #80]	@ (800a4c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a476:	68d2      	ldr	r2, [r2, #12]
 800a478:	0a12      	lsrs	r2, r2, #8
 800a47a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a47e:	fb02 f303 	mul.w	r3, r2, r3
 800a482:	617b      	str	r3, [r7, #20]
    break;
 800a484:	e00c      	b.n	800a4a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a486:	4a12      	ldr	r2, [pc, #72]	@ (800a4d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a48e:	4a0e      	ldr	r2, [pc, #56]	@ (800a4c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a490:	68d2      	ldr	r2, [r2, #12]
 800a492:	0a12      	lsrs	r2, r2, #8
 800a494:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a498:	fb02 f303 	mul.w	r3, r2, r3
 800a49c:	617b      	str	r3, [r7, #20]
    break;
 800a49e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a4a0:	4b09      	ldr	r3, [pc, #36]	@ (800a4c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	0e5b      	lsrs	r3, r3, #25
 800a4a6:	f003 0303 	and.w	r3, r3, #3
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a4ba:	687b      	ldr	r3, [r7, #4]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	371c      	adds	r7, #28
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	40021000 	.word	0x40021000
 800a4cc:	016e3600 	.word	0x016e3600
 800a4d0:	00f42400 	.word	0x00f42400

0800a4d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4dc:	2300      	movs	r3, #0
 800a4de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 8098 	beq.w	800a622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4f6:	4b43      	ldr	r3, [pc, #268]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10d      	bne.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a502:	4b40      	ldr	r3, [pc, #256]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a506:	4a3f      	ldr	r2, [pc, #252]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a50c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a50e:	4b3d      	ldr	r3, [pc, #244]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a516:	60bb      	str	r3, [r7, #8]
 800a518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a51a:	2301      	movs	r3, #1
 800a51c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a51e:	4b3a      	ldr	r3, [pc, #232]	@ (800a608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a39      	ldr	r2, [pc, #228]	@ (800a608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a52a:	f7fe f96f 	bl	800880c <HAL_GetTick>
 800a52e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a530:	e009      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a532:	f7fe f96b 	bl	800880c <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d902      	bls.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	74fb      	strb	r3, [r7, #19]
        break;
 800a544:	e005      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a546:	4b30      	ldr	r3, [pc, #192]	@ (800a608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d0ef      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a552:	7cfb      	ldrb	r3, [r7, #19]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d159      	bne.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a558:	4b2a      	ldr	r3, [pc, #168]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a55e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a562:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d01e      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	429a      	cmp	r2, r3
 800a572:	d019      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a574:	4b23      	ldr	r3, [pc, #140]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a57a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a57e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a580:	4b20      	ldr	r3, [pc, #128]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a586:	4a1f      	ldr	r2, [pc, #124]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a58c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a590:	4b1c      	ldr	r3, [pc, #112]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a596:	4a1b      	ldr	r2, [pc, #108]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a59c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a5a0:	4a18      	ldr	r2, [pc, #96]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d016      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5b2:	f7fe f92b 	bl	800880c <HAL_GetTick>
 800a5b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5b8:	e00b      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ba:	f7fe f927 	bl	800880c <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d902      	bls.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	74fb      	strb	r3, [r7, #19]
            break;
 800a5d0:	e006      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0ec      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a5e0:	7cfb      	ldrb	r3, [r7, #19]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10b      	bne.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5e6:	4b07      	ldr	r3, [pc, #28]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5f4:	4903      	ldr	r1, [pc, #12]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a5fc:	e008      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5fe:	7cfb      	ldrb	r3, [r7, #19]
 800a600:	74bb      	strb	r3, [r7, #18]
 800a602:	e005      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a604:	40021000 	.word	0x40021000
 800a608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a60c:	7cfb      	ldrb	r3, [r7, #19]
 800a60e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a610:	7c7b      	ldrb	r3, [r7, #17]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d105      	bne.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a616:	4ba7      	ldr	r3, [pc, #668]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a61a:	4aa6      	ldr	r2, [pc, #664]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a61c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a620:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a62e:	4ba1      	ldr	r3, [pc, #644]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a634:	f023 0203 	bic.w	r2, r3, #3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	499d      	ldr	r1, [pc, #628]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0302 	and.w	r3, r3, #2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00a      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a650:	4b98      	ldr	r3, [pc, #608]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a656:	f023 020c 	bic.w	r2, r3, #12
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	4995      	ldr	r1, [pc, #596]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a660:	4313      	orrs	r3, r2
 800a662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a672:	4b90      	ldr	r3, [pc, #576]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a678:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	498c      	ldr	r1, [pc, #560]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a682:	4313      	orrs	r3, r2
 800a684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0308 	and.w	r3, r3, #8
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00a      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a694:	4b87      	ldr	r3, [pc, #540]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a69a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	4984      	ldr	r1, [pc, #528]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0310 	and.w	r3, r3, #16
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a6b6:	4b7f      	ldr	r3, [pc, #508]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	497b      	ldr	r1, [pc, #492]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0320 	and.w	r3, r3, #32
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00a      	beq.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6d8:	4b76      	ldr	r3, [pc, #472]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	4973      	ldr	r1, [pc, #460]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a6fa:	4b6e      	ldr	r3, [pc, #440]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a700:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	496a      	ldr	r1, [pc, #424]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00a      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a71c:	4b65      	ldr	r3, [pc, #404]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a722:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	4962      	ldr	r1, [pc, #392]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00a      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a73e:	4b5d      	ldr	r3, [pc, #372]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74c:	4959      	ldr	r1, [pc, #356]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a74e:	4313      	orrs	r3, r2
 800a750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00a      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a760:	4b54      	ldr	r3, [pc, #336]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a766:	f023 0203 	bic.w	r2, r3, #3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a76e:	4951      	ldr	r1, [pc, #324]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a770:	4313      	orrs	r3, r2
 800a772:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00a      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a782:	4b4c      	ldr	r3, [pc, #304]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a788:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a790:	4948      	ldr	r1, [pc, #288]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a792:	4313      	orrs	r3, r2
 800a794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d015      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7a4:	4b43      	ldr	r3, [pc, #268]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b2:	4940      	ldr	r1, [pc, #256]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7c2:	d105      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7c4:	4b3b      	ldr	r3, [pc, #236]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	4a3a      	ldr	r2, [pc, #232]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d015      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a7dc:	4b35      	ldr	r3, [pc, #212]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ea:	4932      	ldr	r1, [pc, #200]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7fa:	d105      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7fc:	4b2d      	ldr	r3, [pc, #180]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	4a2c      	ldr	r2, [pc, #176]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a806:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d015      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a814:	4b27      	ldr	r3, [pc, #156]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a81a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a822:	4924      	ldr	r1, [pc, #144]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a824:	4313      	orrs	r3, r2
 800a826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a832:	d105      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a834:	4b1f      	ldr	r3, [pc, #124]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	4a1e      	ldr	r2, [pc, #120]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a83a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a83e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d015      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a84c:	4b19      	ldr	r3, [pc, #100]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a85a:	4916      	ldr	r1, [pc, #88]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a86a:	d105      	bne.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a86c:	4b11      	ldr	r3, [pc, #68]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	4a10      	ldr	r2, [pc, #64]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a876:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d019      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a884:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a88a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a892:	4908      	ldr	r1, [pc, #32]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a894:	4313      	orrs	r3, r2
 800a896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a89e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8a2:	d109      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8a4:	4b03      	ldr	r3, [pc, #12]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	4a02      	ldr	r2, [pc, #8]	@ (800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8ae:	60d3      	str	r3, [r2, #12]
 800a8b0:	e002      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a8b2:	bf00      	nop
 800a8b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d015      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a8c4:	4b29      	ldr	r3, [pc, #164]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8d2:	4926      	ldr	r1, [pc, #152]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8e2:	d105      	bne.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a8e4:	4b21      	ldr	r3, [pc, #132]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	4a20      	ldr	r2, [pc, #128]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d015      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a902:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a90a:	4918      	ldr	r1, [pc, #96]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a90c:	4313      	orrs	r3, r2
 800a90e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a91a:	d105      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a91c:	4b13      	ldr	r3, [pc, #76]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	4a12      	ldr	r2, [pc, #72]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a926:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d015      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a934:	4b0d      	ldr	r3, [pc, #52]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a936:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a93a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a942:	490a      	ldr	r1, [pc, #40]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a944:	4313      	orrs	r3, r2
 800a946:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a94e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a952:	d105      	bne.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a954:	4b05      	ldr	r3, [pc, #20]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	4a04      	ldr	r2, [pc, #16]	@ (800a96c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a95a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a95e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a960:	7cbb      	ldrb	r3, [r7, #18]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	40021000 	.word	0x40021000

0800a970 <memset>:
 800a970:	4402      	add	r2, r0
 800a972:	4603      	mov	r3, r0
 800a974:	4293      	cmp	r3, r2
 800a976:	d100      	bne.n	800a97a <memset+0xa>
 800a978:	4770      	bx	lr
 800a97a:	f803 1b01 	strb.w	r1, [r3], #1
 800a97e:	e7f9      	b.n	800a974 <memset+0x4>

0800a980 <__libc_init_array>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b8 <__libc_init_array+0x38>)
 800a984:	4c0d      	ldr	r4, [pc, #52]	@ (800a9bc <__libc_init_array+0x3c>)
 800a986:	1b64      	subs	r4, r4, r5
 800a988:	10a4      	asrs	r4, r4, #2
 800a98a:	2600      	movs	r6, #0
 800a98c:	42a6      	cmp	r6, r4
 800a98e:	d109      	bne.n	800a9a4 <__libc_init_array+0x24>
 800a990:	4d0b      	ldr	r5, [pc, #44]	@ (800a9c0 <__libc_init_array+0x40>)
 800a992:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c4 <__libc_init_array+0x44>)
 800a994:	f000 f818 	bl	800a9c8 <_init>
 800a998:	1b64      	subs	r4, r4, r5
 800a99a:	10a4      	asrs	r4, r4, #2
 800a99c:	2600      	movs	r6, #0
 800a99e:	42a6      	cmp	r6, r4
 800a9a0:	d105      	bne.n	800a9ae <__libc_init_array+0x2e>
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a8:	4798      	blx	r3
 800a9aa:	3601      	adds	r6, #1
 800a9ac:	e7ee      	b.n	800a98c <__libc_init_array+0xc>
 800a9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b2:	4798      	blx	r3
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	e7f2      	b.n	800a99e <__libc_init_array+0x1e>
 800a9b8:	0800aa08 	.word	0x0800aa08
 800a9bc:	0800aa08 	.word	0x0800aa08
 800a9c0:	0800aa08 	.word	0x0800aa08
 800a9c4:	0800aa0c 	.word	0x0800aa0c

0800a9c8 <_init>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	bf00      	nop
 800a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ce:	bc08      	pop	{r3}
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	4770      	bx	lr

0800a9d4 <_fini>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	bf00      	nop
 800a9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9da:	bc08      	pop	{r3}
 800a9dc:	469e      	mov	lr, r3
 800a9de:	4770      	bx	lr
